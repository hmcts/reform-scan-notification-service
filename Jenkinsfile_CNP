#!groovy @Library("Infrastructure") @Library("Infrastructure")
@Library("Infrastructure")

import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "reform-scan"
def component = "notification-service"

def channel = '#bsp-build-notices'

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  after('test') {
    builder.gradle('integration')
  }

  before('smoketest:preview') {
    withAksClient('nonprod') {
      // Notifications queue connection string is needed by the functional tests.
      // The following code (as ugly as it looks!) gets it from the k8s cluster
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def sbNamespaceSecret = "servicebus-secret-namespace-${aksServiceName}"
      def namespace = new TeamConfig(this).getNameSpace(product)

      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get notifications queue connection string
      def sbConnectionStr = kubectl.getSecret(sbNamespaceSecret, namespace, "{.data.connectionString}")
      env.NOTIFICATION_QUEUE_CONN_STRING_READ = "${sbConnectionStr};EntityPath=notifications"
      env.NOTIFICATION_QUEUE_CONN_STRING_WRITE = "${sbConnectionStr};EntityPath=notifications"
    }
  }

  enableDbMigration('reform-scan') // vault 'prefix'
  enableAksStagingDeployment()
  installCharts()
  enableSlackNotifications(channel)
  disableLegacyDeployment()
}
