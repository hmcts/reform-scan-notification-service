#!groovy @Library("Infrastructure") @Library("Infrastructure")
@Library("Infrastructure")

import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "reform-scan"
def component = "notification-service"

def channel = '#bsp-build-notices'

GradleBuilder builder = new GradleBuilder(this, product)

/*
In following sections we use bulk-scan-processor-tests key for testing only.
Bulk Scan Processor will be main client for this service and use it's own key
so for testing purposes it makes sense to use as an example.
 */
def nonPrSecrets = [
  'reform-scan-${env}': [
    secret('notifications-queue-listen-connection-string', 'NOTIFICATION_QUEUE_CONN_STRING_READ'),
    secret('notifications-queue-send-connection-string', 'NOTIFICATION_QUEUE_CONN_STRING_WRITE')
  ],
  's2s-${env}': [
    secret('microservicekey-bulk-scan-processor-tests', 'TEST_S2S_SECRET')
  ]
]

def prSecrets = [
  's2s-${env}': [
    secret('microservicekey-bulk-scan-processor-tests', 'TEST_S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  after('test') {
    builder.gradle('integration')
  }

  after('akschartsinstall') {
    // Vars needed for AKS testing
    env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  }

  before('smoketest:preview') {
    withAksClient('nonprod') {
      // Notifications queue connection string is needed by the functional tests.
      // The following code (as ugly as it looks!) gets it from the k8s cluster
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def sbNamespaceSecret = "servicebus-secret-namespace-${aksServiceName}"
      def namespace = new TeamConfig(this).getNameSpace(product)

      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get notifications queue connection string
      def sbConnectionStr = kubectl.getSecret(sbNamespaceSecret, namespace, "{.data.connectionString}")
      env.NOTIFICATION_QUEUE_CONN_STRING_READ = "${sbConnectionStr};EntityPath=notifications"
      env.NOTIFICATION_QUEUE_CONN_STRING_WRITE = "${sbConnectionStr};EntityPath=notifications"
    }
  }

  enableDbMigration('reform-scan') // vault 'prefix'
  enableAksStagingDeployment()
  installCharts()
  enableSlackNotifications(channel)
  disableLegacyDeployment()

  onNonPR() {
    loadVaultSecrets(nonPrSecrets)
  }

  onPR() {
    loadVaultSecrets(prSecrets)
  }
}
